// 8kyu Учитывая непустой массив целых чисел, вернуть результат умножения значений вместе по порядку.
// Пример: [1, 2, 3, 4] => 1 * 2 * 3 * 4 = 24

function grow(x){
  return x.sort((a, b) => a - b).reduce((acc, rec) => acc * rec)
}


// 8kyu Вы получаете массив чисел, возвращаете сумму всех положительных.
// Пример [1,-4,7,12] => 1 + 7 + 12 = 20 Примечание: если суммировать нечего, сумма по умолчанию равна 0.

function positiveSum(arr) {
  return arr.filter(num => num > 0)
    .reduce((sum, curr) => sum + curr, 0);
}

// или (взяла решение в codewars)

function positiveSum(arr) {
  return arr.reduce((a,b)=> a + (b > 0 ? b : 0),0);
}


// 7kyu Учитывая целое число в качестве входных данных, можете ли вы округлить его до следующего (что означает «больше или равно»), кратного 5?
// input:    output:
// 0 -> 0
// 2 -> 5
// 12 -> 15
// 21 -> 25
// 30 -> 30
// -2 -> 0
// -5 -> -5

function roundToNext5(n){
  return Math.ceil(n / 5) * 5
}

// ceil = округляет переданное ему число в большую сторону до ближайшего целого числа.

// 8kyu Создайте функцию, которая возвращает значение, умноженное на 50 и увеличенное на 6.
// Если введенное значение является строкой, оно должно возвращать «Ошибка».

function problem(x){
  return typeof x === 'number' ? x * 50 + 6 : 'Error';
}


// 8kyu Напишите функцию bmi, которая вычисляет индекс массы тела (bmi = вес / рост2).
// если ИМТ <= 18,5, вернуть "Недостаточный вес" если ИМТ <= 25,0,
// вернуть «Нормальный»
// если ИМТ <= 30,0 вернуть "Избыточный вес"
// если ИМТ > 30, верните «Ожирение».

function bmi(weight, height) {
  let a = weight / height ** 2
  if(a <= 18.5 ) {
    return "Underweight"
  } else if (a <= 25.0) {
    return "Normal"
  } else if (a <= 30.0) {
    return "Overweight"
  } else if (a > 30.0) {
    return "Obese"
  }
}

// 8kyu Создайте функцию с именем ярлык для удаления строчных гласных (a, e, i, o, u) в заданной строке.
function shortcut (string) {
  return string.replace(/[aeiou]/gi, '');
}


// 8kyu Дан массив целых чисел.
// Возвращает массив, где первый элемент — это количество положительных чисел,
// а второй элемент — сумма отрицательных чисел.
// 0 не является ни положительным, ни отрицательным.
// Если вход представляет собой пустой массив или имеет значение null, верните пустой массив.
// Пример Для ввода [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15] вы должны вернуть [10, -65].

function  countPositivesSumNegatives(numbers) {
  if (numbers === null || numbers.length === 0) {
    return [];
  }

  let positiveCount = 0;
  let negativeSum = 0;

  for (let i = 0; i < numbers.length; i++) {
    const number = numbers[i];

    if (number > 0) {
      positiveCount++;
    } else if (number < 0) {
      negativeSum += number;
    }
  }

  return [positiveCount, negativeSum];
}


// 6kyu Вам будет дано число, и вам нужно будет вернуть его в виде строки в расширенной форме.
// Например: расширенная форма (12);
// Должен вернуть '10 + 2' расширенная форма (42);
// Должен вернуть '40 + 2' расширенная форма (70304);
// Должен вернуть '70000 + 300 + 4'
// ПРИМЕЧАНИЕ. Все числа будут целыми числами больше 0.

// Алгоритм
// Преобразовать число в строку = const strNum = String(num)
// Создать пустую строку для формирования ответа = result
// Пройтись по каждой цифре числа = for
// Если цифра числа равна нулю, пропустить ее
// Если цифра числа не равна нулю, добавить ее в ответ, умноженную на соответствующую степень десятки, разделенную знаком «+»
// Вернуть ответ без последнего знака «+»

// parseInt - функция, которая преобразует строку в целое число.
// Она принимает два аргумента: строку, которую нужно преобразовать, и опциональный аргумент radix, который указывает систему счисления, используемую в строке.

function expandedForm(num) {
  const strNum = String(num);
  let result = '';

  for (let i = 0; i < strNum.length; i++) {
    const digit = parseInt(strNum[i], 10);
    if (digit !== 0) {
      if (result !== '') {
        result += ' + ';
      }
      result += digit * Math.pow(10, strNum.length - i - 1);
    }
  }

  return result;
}
